{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","time","players","responseMode","response","addPlayer","bind","assertThisInitialized","handleChange","handleSubmit","clearPlayers","clearFields","player","start","length","setState","toConsumableArray","concat","alert","event","defineProperty","target","value","slice","sort","a","b","parseFloat","position","i","forEach","console","log","_this2","rows","map","index","react_default","createElement","key","scope","responseRows","status","className","onClick","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAyOeA,qBApOX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,cAAc,EACdC,SAAU,IAIdZ,EAAKa,UAAYb,EAAKa,UAAUC,KAAfb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACjBA,EAAKgB,aAAehB,EAAKgB,aAAaF,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACpBA,EAAKiB,aAAejB,EAAKiB,aAAaH,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACpBA,EAAKkB,aAAelB,EAAKkB,aAAaJ,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAEpBA,EAAKmB,YAAcnB,EAAKmB,YAAYL,KAAjBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAjBJA,2EAwBf,IAAMoB,EAAS,CACXZ,KAAML,KAAKI,MAAMC,KACjBC,KAAMN,KAAKI,MAAME,KACjBY,MAAOlB,KAAKI,MAAMG,QAAQY,QAGV,KAAhBF,EAAOZ,MAA+B,KAAhBY,EAAOX,KACzBN,KAAKI,MAAMG,QAAQY,OAAS,EAC5BnB,KAAKoB,SAAS,CACVb,QAAQT,OAAAuB,EAAA,EAAAvB,CAAKE,KAAKI,MAAMG,SAAjBe,OAAA,CAA0BL,MAGrCM,MAAM,oCAGVA,MAAM,mBAGVvB,KAAKgB,mDAGIQ,GAETxB,KAAKoB,SAALtB,OAAA2B,EAAA,EAAA3B,CAAA,GACK0B,EAAME,OAAOrB,KAAOmB,EAAME,OAAOC,+CAOtC,IAAIpB,EAAUP,KAAKI,MAAMG,QAAQqB,QAEjCrB,EAAQsB,KAAK,SAACC,EAAGC,GACb,OAAIC,WAAWF,EAAExB,MAAQ0B,WAAWD,EAAEzB,MAC3B,EAEA,IAMf,IAFA,IAAI2B,EAAW,EAENC,EAAI,EAAGA,EAAI3B,EAAQY,OAAQe,IAC5BA,EAAI,GAAK3B,EAAQ2B,GAAG5B,OAASC,EAAQ2B,EAAI,GAAG5B,OAC5C2B,EAAWC,EAAI,GAGnB3B,EAAQ2B,GAAR,SAAyBD,EAG7B1B,EAAQ4B,QAAQ,SAAClB,GACW,IAApBA,EAAOgB,SACPhB,EAAM,OAAa,UAEnBA,EAAM,OAAa,KAI3BmB,QAAQC,IAAI9B,GAEZP,KAAKoB,SACD,CACIX,SAAUF,EACVC,cAAc,2CAOtBR,KAAKoB,SAAS,CACVb,QAAS,2CAKbP,KAAKoB,SAAS,CACVf,KAAM,GACNC,KAAM,sCAKL,IAAAgC,EAAAtC,KAECuC,EAAOvC,KAAKI,MAAMG,QAAQiC,IAAI,SAACvB,EAAQwB,GACzC,OACIC,EAAAZ,EAAAa,cAAA,MAAIC,IAAKH,GACLC,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAOJ,GACjBC,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAOZ,MACxBqC,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAOX,SAK9BwC,EAAe9C,KAAKI,MAAMK,SAAS+B,IAAI,SAACvB,EAAQwB,GAClD,OACIC,EAAAZ,EAAAa,cAAA,MAAIC,IAAKH,GACLC,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAOgB,UACxBS,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAOC,OACxBwB,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAOZ,MACxBqC,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAOX,MACxBoC,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAO5B,EAAO8B,WAyFpC,OACIL,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,aAGVhD,KAAKI,MAAMI,aArFZkC,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,oBACXN,EAAAZ,EAAAa,cAAA,SAAOK,UAAU,qBACbN,EAAAZ,EAAAa,cAAA,aACAD,EAAAZ,EAAAa,cAAA,UACID,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,iBACAH,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,WACAH,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,iBACAH,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,YACAH,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,eAGJH,EAAAZ,EAAAa,cAAA,aACCG,IAKLJ,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,sCACXN,EAAAZ,EAAAa,cAAA,UAAQK,UAAU,6CACVC,QAAS,kBAAMX,EAAKlB,SAAS,CAACZ,cAAc,MADpD,YAYRkC,EAAAZ,EAAAa,cAAA,WAEID,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,aAEXN,EAAAZ,EAAAa,cAAA,yBACcL,EAAKlC,MAAMG,QAAQY,QAEjCuB,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,OACXN,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,SACXN,EAAAZ,EAAAa,cAAA,SAAOO,KAAK,OAAO7C,KAAK,OAAO2C,UAAU,eAAeG,YAAY,OAC7DC,SAAUd,EAAKzB,aAAcc,MAAOW,EAAKlC,MAAMC,QAE1DqC,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,SACXN,EAAAZ,EAAAa,cAAA,SAAOO,KAAK,SAAS7C,KAAK,OAAO2C,UAAU,eAAeG,YAAY,QAC/DC,SAAUd,EAAKzB,aAAcc,MAAOW,EAAKlC,MAAME,QAE1DoC,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,SACXN,EAAAZ,EAAAa,cAAA,UAAQK,UAAU,eAAeC,QAAS,kBAAMX,EAAK5B,cAArD,cAMZgC,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,oBACXN,EAAAZ,EAAAa,cAAA,SAAOK,UAAU,qBACbN,EAAAZ,EAAAa,cAAA,aACAD,EAAAZ,EAAAa,cAAA,UACID,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,WACAH,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,iBACAH,EAAAZ,EAAAa,cAAA,MAAIE,MAAM,OAAV,cAGJH,EAAAZ,EAAAa,cAAA,aACCJ,IAKLG,EAAAZ,EAAAa,cAAA,OAAKK,UAAU,sCACXN,EAAAZ,EAAAa,cAAA,UAAQK,UAAU,8CACVC,QAAS,kBAAMX,EAAKvB,iBAD5B,UAGA2B,EAAAZ,EAAAa,cAAA,UAAQK,UAAU,6CACVC,QAAS,kBAAMX,EAAKxB,iBAD5B,uBAjNVuC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlB,EAAAZ,EAAAa,cAACkB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e947341b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './stylesheet.css'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: '',\n            time: '',\n            players: [],\n            responseMode: false,\n            response: []\n\n        };\n\n        this.addPlayer = this.addPlayer.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearPlayers = this.clearPlayers.bind(this);\n\n        this.clearFields = this.clearFields.bind(this);\n\n    };\n\n\n    addPlayer() {\n\n        const player = {\n            name: this.state.name,\n            time: this.state.time,\n            start: this.state.players.length\n        };\n\n        if (player.name !== '' && player.time !== '') {\n            if (this.state.players.length < 6) {\n                this.setState({\n                    players: [...this.state.players, player]\n                });\n            } else {\n                alert('Numero máximo de competidores')\n            }\n        } else {\n            alert('Campo em branco')\n        }\n\n        this.clearFields();\n    }\n\n    handleChange(event) {\n\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n\n    }\n\n    handleSubmit() {\n\n        let players = this.state.players.slice();\n\n        players.sort((a, b) => {\n            if (parseFloat(a.time) > parseFloat(b.time)) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        let position = 1;\n\n        for (let i = 0; i < players.length; i++) {\n            if (i > 0 && players[i].time !== players[i - 1].time) {\n                position = i + 1;\n            }\n\n            players[i]['position'] = position;\n        }\n\n        players.forEach((player) => {\n            if (player.position === 1) {\n                player['status'] = 'Venceu!'\n            } else {\n                player['status'] = ''\n            }\n        });\n\n        console.log(players);\n\n        this.setState(\n            {\n                response: players,\n                responseMode: true,\n            }\n        )\n\n    }\n\n    clearPlayers() {\n        this.setState({\n            players: []\n        })\n    }\n\n    clearFields() {\n        this.setState({\n            name: '',\n            time: ''\n        })\n    }\n\n\n    render() {\n\n        const rows = this.state.players.map((player, index) => {\n            return (\n                <tr key={index}>\n                    <th scope=\"col\">{index}</th>\n                    <th scope=\"col\">{player.name}</th>\n                    <th scope=\"col\">{player.time}</th>\n                </tr>\n            );\n        });\n\n        const responseRows = this.state.response.map((player, index) => {\n            return (\n                <tr key={index}>\n                    <th scope=\"col\">{player.position}</th>\n                    <th scope=\"col\">{player.start}</th>\n                    <th scope=\"col\">{player.name}</th>\n                    <th scope=\"col\">{player.time}</th>\n                    <th scope=\"col\">{player.status}</th>\n                </tr>\n            );\n        });\n\n\n        const formTableResponse = () => {\n            return (\n                <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                        <thead>\n                        <tr>\n                            <th scope=\"col\">Posição</th>\n                            <th scope=\"col\">Largada</th>\n                            <th scope=\"col\">Competidor(a)</th>\n                            <th scope=\"col\">Tempo(s)</th>\n                            <th scope=\"col\">Resultado</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {responseRows}\n                        </tbody>\n\n                    </table>\n\n                    <div className=\"d-flex justify-content-center mb-4\">\n                        <button className=\"mx-4 my-auto btn btn-dark btn-lg btn-block\"\n                                onClick={() => this.setState({responseMode: false})}>Voltar\n                        </button>\n                    </div>\n                </div>\n            );\n        };\n\n\n        const formTable = () => {\n            return (\n\n                <div>\n\n                    <div className=\"mb-4 mt-4\">\n\n                        <label>\n                            Jogador #{this.state.players.length}\n                        </label>\n                        <div className=\"row\">\n                            <div className=\"col-5\">\n                                <input type=\"text\" name=\"name\" className=\"form-control\" placeholder=\"Nome\"\n                                       onChange={this.handleChange} value={this.state.name}/>\n                            </div>\n                            <div className=\"col-5\">\n                                <input type=\"number\" name=\"time\" className=\"form-control\" placeholder=\"Tempo\"\n                                       onChange={this.handleChange} value={this.state.time}/>\n                            </div>\n                            <div className=\"col-2\">\n                                <button className=\"btn btn-dark\" onClick={() => this.addPlayer()}>Inserir</button>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div className=\"table-responsive\">\n                        <table className=\"table table-hover\">\n                            <thead>\n                            <tr>\n                                <th scope=\"col\">Largada</th>\n                                <th scope=\"col\">Competidor(a)</th>\n                                <th scope=\"col\">Tempo(s)</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {rows}\n                            </tbody>\n\n                        </table>\n\n                        <div className=\"d-flex justify-content-center mb-4\">\n                            <button className=\"mx-4 my-auto btn btn-light btn-lg btn-block\"\n                                    onClick={() => this.clearPlayers()}>Limpar\n                            </button>\n                            <button className=\"mx-4 my-auto btn btn-dark btn-lg btn-block\"\n                                    onClick={() => this.handleSubmit()}>Submeter\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            );\n        };\n\n        return (\n            <div className=\"container\">\n\n\n                {this.state.responseMode ? formTableResponse() : formTable()}\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}